# -*- coding: utf-8 -*-
"""SimpleLR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13kV4teHp1gpkEpoZx0-oztpc4lTspy3M
"""

## Simple Linear regression
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

cgpa = np.array([2.4,6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5])

# Corresponding package in LPA (output) â€“ assumed relation
package = np.array([1,4, 4.5, 5, 6, 7, 8, 9 ])

df=pd.DataFrame(data={'cgpa': cgpa, 'package(LPA)': package})
df.head()

## for graph
plt.scatter(df['cgpa'], df['package(LPA)'])
plt.xlabel('cgpa')
plt.ylabel('package(LPA)')

## separting both x and y
x=df.iloc[:,0]
y=df.iloc[:,-1]
y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=2)

from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(x_train.values.reshape(-1,1),y_train.values.reshape(-1,1))

x_test

y_test

lr.predict(x_test.values.reshape(-1,1))

plt.scatter(df['cgpa'], df['package(LPA)']) ## this shows the best fit line
plt.plot(x_train,lr.predict(x_train.values.reshape(-1,1)),color='red')
plt.xlabel('cgpa')
plt.ylabel('package(LPA)')

## after finding the best fit line , it finds the slope and intercept
lr.coef_
lr.intercept_